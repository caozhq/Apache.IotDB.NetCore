/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace Apache.IoTDB.Cluster.Rpc.Thrift
{

  public partial class AddNodeResponse : TBase
  {
    private byte[] _partitionTableBytes;
    private CheckStatusResponse _checkStatusResponse;

    public int RespNum { get; set; }

    public byte[] PartitionTableBytes
    {
      get
      {
        return _partitionTableBytes;
      }
      set
      {
        __isset.partitionTableBytes = true;
        this._partitionTableBytes = value;
      }
    }

    public CheckStatusResponse CheckStatusResponse
    {
      get
      {
        return _checkStatusResponse;
      }
      set
      {
        __isset.checkStatusResponse = true;
        this._checkStatusResponse = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool partitionTableBytes;
      public bool checkStatusResponse;
    }

    public AddNodeResponse()
    {
    }

    public AddNodeResponse(int respNum) : this()
    {
      this.RespNum = respNum;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_respNum = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                RespNum = await iprot.ReadI32Async(cancellationToken);
                isset_respNum = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                PartitionTableBytes = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                CheckStatusResponse = new CheckStatusResponse();
                await CheckStatusResponse.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_respNum)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("AddNodeResponse");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "respNum";
        field.Type = TType.I32;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(RespNum, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if (PartitionTableBytes != null && __isset.partitionTableBytes)
        {
          field.Name = "partitionTableBytes";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(PartitionTableBytes, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (CheckStatusResponse != null && __isset.checkStatusResponse)
        {
          field.Name = "checkStatusResponse";
          field.Type = TType.Struct;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await CheckStatusResponse.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as AddNodeResponse;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(RespNum, other.RespNum)
        && ((__isset.partitionTableBytes == other.__isset.partitionTableBytes) && ((!__isset.partitionTableBytes) || (TCollections.Equals(PartitionTableBytes, other.PartitionTableBytes))))
        && ((__isset.checkStatusResponse == other.__isset.checkStatusResponse) && ((!__isset.checkStatusResponse) || (System.Object.Equals(CheckStatusResponse, other.CheckStatusResponse))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + RespNum.GetHashCode();
        if(__isset.partitionTableBytes)
          hashcode = (hashcode * 397) + PartitionTableBytes.GetHashCode();
        if(__isset.checkStatusResponse)
          hashcode = (hashcode * 397) + CheckStatusResponse.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("AddNodeResponse(");
      sb.Append(", RespNum: ");
      sb.Append(RespNum);
      if (PartitionTableBytes != null && __isset.partitionTableBytes)
      {
        sb.Append(", PartitionTableBytes: ");
        sb.Append(PartitionTableBytes);
      }
      if (CheckStatusResponse != null && __isset.checkStatusResponse)
      {
        sb.Append(", CheckStatusResponse: ");
        sb.Append(CheckStatusResponse);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
