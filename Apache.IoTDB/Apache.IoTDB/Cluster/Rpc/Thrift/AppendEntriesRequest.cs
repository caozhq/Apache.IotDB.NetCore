/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace Apache.IoTDB.Cluster.Rpc.Thrift
{

  public partial class AppendEntriesRequest : TBase
  {
    private Node _header;

    public long Term { get; set; }

    public Node Leader { get; set; }

    public List<byte[]> Entries { get; set; }

    public long PrevLogIndex { get; set; }

    public long PrevLogTerm { get; set; }

    public long LeaderCommit { get; set; }

    public Node Header
    {
      get
      {
        return _header;
      }
      set
      {
        __isset.header = true;
        this._header = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool header;
    }

    public AppendEntriesRequest()
    {
    }

    public AppendEntriesRequest(long term, Node leader, List<byte[]> entries, long prevLogIndex, long prevLogTerm, long leaderCommit) : this()
    {
      this.Term = term;
      this.Leader = leader;
      this.Entries = entries;
      this.PrevLogIndex = prevLogIndex;
      this.PrevLogTerm = prevLogTerm;
      this.LeaderCommit = leaderCommit;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_term = false;
        bool isset_leader = false;
        bool isset_entries = false;
        bool isset_prevLogIndex = false;
        bool isset_prevLogTerm = false;
        bool isset_leaderCommit = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                Term = await iprot.ReadI64Async(cancellationToken);
                isset_term = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Leader = new Node();
                await Leader.ReadAsync(iprot, cancellationToken);
                isset_leader = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  TList _list0 = await iprot.ReadListBeginAsync(cancellationToken);
                  Entries = new List<byte[]>(_list0.Count);
                  for(int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    byte[] _elem2;
                    _elem2 = await iprot.ReadBinaryAsync(cancellationToken);
                    Entries.Add(_elem2);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_entries = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I64)
              {
                PrevLogIndex = await iprot.ReadI64Async(cancellationToken);
                isset_prevLogIndex = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I64)
              {
                PrevLogTerm = await iprot.ReadI64Async(cancellationToken);
                isset_prevLogTerm = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.I64)
              {
                LeaderCommit = await iprot.ReadI64Async(cancellationToken);
                isset_leaderCommit = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.Struct)
              {
                Header = new Node();
                await Header.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_term)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_leader)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_entries)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_prevLogIndex)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_prevLogTerm)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_leaderCommit)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("AppendEntriesRequest");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "term";
        field.Type = TType.I64;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(Term, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "leader";
        field.Type = TType.Struct;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Leader.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "entries";
        field.Type = TType.List;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, Entries.Count), cancellationToken);
          foreach (byte[] _iter3 in Entries)
          {
            await oprot.WriteBinaryAsync(_iter3, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "prevLogIndex";
        field.Type = TType.I64;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(PrevLogIndex, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "prevLogTerm";
        field.Type = TType.I64;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(PrevLogTerm, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "leaderCommit";
        field.Type = TType.I64;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(LeaderCommit, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if (Header != null && __isset.header)
        {
          field.Name = "header";
          field.Type = TType.Struct;
          field.ID = 7;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Header.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as AppendEntriesRequest;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(Term, other.Term)
        && System.Object.Equals(Leader, other.Leader)
        && TCollections.Equals(Entries, other.Entries)
        && System.Object.Equals(PrevLogIndex, other.PrevLogIndex)
        && System.Object.Equals(PrevLogTerm, other.PrevLogTerm)
        && System.Object.Equals(LeaderCommit, other.LeaderCommit)
        && ((__isset.header == other.__isset.header) && ((!__isset.header) || (System.Object.Equals(Header, other.Header))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + Term.GetHashCode();
        hashcode = (hashcode * 397) + Leader.GetHashCode();
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Entries);
        hashcode = (hashcode * 397) + PrevLogIndex.GetHashCode();
        hashcode = (hashcode * 397) + PrevLogTerm.GetHashCode();
        hashcode = (hashcode * 397) + LeaderCommit.GetHashCode();
        if(__isset.header)
          hashcode = (hashcode * 397) + Header.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("AppendEntriesRequest(");
      sb.Append(", Term: ");
      sb.Append(Term);
      sb.Append(", Leader: ");
      sb.Append(Leader);
      sb.Append(", Entries: ");
      sb.Append(Entries);
      sb.Append(", PrevLogIndex: ");
      sb.Append(PrevLogIndex);
      sb.Append(", PrevLogTerm: ");
      sb.Append(PrevLogTerm);
      sb.Append(", LeaderCommit: ");
      sb.Append(LeaderCommit);
      if (Header != null && __isset.header)
      {
        sb.Append(", Header: ");
        sb.Append(Header);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
