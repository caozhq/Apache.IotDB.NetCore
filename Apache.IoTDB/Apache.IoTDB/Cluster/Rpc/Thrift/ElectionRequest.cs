/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace Apache.IoTDB.Cluster.Rpc.Thrift
{

  public partial class ElectionRequest : TBase
  {
    private Node _header;
    private long _dataLogLastIndex;
    private long _dataLogLastTerm;

    public long Term { get; set; }

    public long LastLogTerm { get; set; }

    public long LastLogIndex { get; set; }

    public Node Elector { get; set; }

    public Node Header
    {
      get
      {
        return _header;
      }
      set
      {
        __isset.header = true;
        this._header = value;
      }
    }

    public long DataLogLastIndex
    {
      get
      {
        return _dataLogLastIndex;
      }
      set
      {
        __isset.dataLogLastIndex = true;
        this._dataLogLastIndex = value;
      }
    }

    public long DataLogLastTerm
    {
      get
      {
        return _dataLogLastTerm;
      }
      set
      {
        __isset.dataLogLastTerm = true;
        this._dataLogLastTerm = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool header;
      public bool dataLogLastIndex;
      public bool dataLogLastTerm;
    }

    public ElectionRequest()
    {
    }

    public ElectionRequest(long term, long lastLogTerm, long lastLogIndex, Node elector) : this()
    {
      this.Term = term;
      this.LastLogTerm = lastLogTerm;
      this.LastLogIndex = lastLogIndex;
      this.Elector = elector;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_term = false;
        bool isset_lastLogTerm = false;
        bool isset_lastLogIndex = false;
        bool isset_elector = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                Term = await iprot.ReadI64Async(cancellationToken);
                isset_term = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                LastLogTerm = await iprot.ReadI64Async(cancellationToken);
                isset_lastLogTerm = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                LastLogIndex = await iprot.ReadI64Async(cancellationToken);
                isset_lastLogIndex = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                Elector = new Node();
                await Elector.ReadAsync(iprot, cancellationToken);
                isset_elector = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Struct)
              {
                Header = new Node();
                await Header.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.I64)
              {
                DataLogLastIndex = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.I64)
              {
                DataLogLastTerm = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_term)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_lastLogTerm)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_lastLogIndex)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_elector)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("ElectionRequest");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "term";
        field.Type = TType.I64;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(Term, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "lastLogTerm";
        field.Type = TType.I64;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(LastLogTerm, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "lastLogIndex";
        field.Type = TType.I64;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(LastLogIndex, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "elector";
        field.Type = TType.Struct;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Elector.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if (Header != null && __isset.header)
        {
          field.Name = "header";
          field.Type = TType.Struct;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Header.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.dataLogLastIndex)
        {
          field.Name = "dataLogLastIndex";
          field.Type = TType.I64;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(DataLogLastIndex, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.dataLogLastTerm)
        {
          field.Name = "dataLogLastTerm";
          field.Type = TType.I64;
          field.ID = 7;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(DataLogLastTerm, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as ElectionRequest;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(Term, other.Term)
        && System.Object.Equals(LastLogTerm, other.LastLogTerm)
        && System.Object.Equals(LastLogIndex, other.LastLogIndex)
        && System.Object.Equals(Elector, other.Elector)
        && ((__isset.header == other.__isset.header) && ((!__isset.header) || (System.Object.Equals(Header, other.Header))))
        && ((__isset.dataLogLastIndex == other.__isset.dataLogLastIndex) && ((!__isset.dataLogLastIndex) || (System.Object.Equals(DataLogLastIndex, other.DataLogLastIndex))))
        && ((__isset.dataLogLastTerm == other.__isset.dataLogLastTerm) && ((!__isset.dataLogLastTerm) || (System.Object.Equals(DataLogLastTerm, other.DataLogLastTerm))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + Term.GetHashCode();
        hashcode = (hashcode * 397) + LastLogTerm.GetHashCode();
        hashcode = (hashcode * 397) + LastLogIndex.GetHashCode();
        hashcode = (hashcode * 397) + Elector.GetHashCode();
        if(__isset.header)
          hashcode = (hashcode * 397) + Header.GetHashCode();
        if(__isset.dataLogLastIndex)
          hashcode = (hashcode * 397) + DataLogLastIndex.GetHashCode();
        if(__isset.dataLogLastTerm)
          hashcode = (hashcode * 397) + DataLogLastTerm.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("ElectionRequest(");
      sb.Append(", Term: ");
      sb.Append(Term);
      sb.Append(", LastLogTerm: ");
      sb.Append(LastLogTerm);
      sb.Append(", LastLogIndex: ");
      sb.Append(LastLogIndex);
      sb.Append(", Elector: ");
      sb.Append(Elector);
      if (Header != null && __isset.header)
      {
        sb.Append(", Header: ");
        sb.Append(Header);
      }
      if (__isset.dataLogLastIndex)
      {
        sb.Append(", DataLogLastIndex: ");
        sb.Append(DataLogLastIndex);
      }
      if (__isset.dataLogLastTerm)
      {
        sb.Append(", DataLogLastTerm: ");
        sb.Append(DataLogLastTerm);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
