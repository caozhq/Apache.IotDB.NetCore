/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace Apache.IoTDB.Cluster.Rpc.Thrift
{

  public partial class HeartBeatResponse : TBase
  {
    private long _lastLogIndex;
    private long _lastLogTerm;
    private Node _follower;
    private int _followerIdentifier;
    private Node _header;

    public long Term { get; set; }

    public long LastLogIndex
    {
      get
      {
        return _lastLogIndex;
      }
      set
      {
        __isset.lastLogIndex = true;
        this._lastLogIndex = value;
      }
    }

    public long LastLogTerm
    {
      get
      {
        return _lastLogTerm;
      }
      set
      {
        __isset.lastLogTerm = true;
        this._lastLogTerm = value;
      }
    }

    public Node Follower
    {
      get
      {
        return _follower;
      }
      set
      {
        __isset.follower = true;
        this._follower = value;
      }
    }

    public int FollowerIdentifier
    {
      get
      {
        return _followerIdentifier;
      }
      set
      {
        __isset.followerIdentifier = true;
        this._followerIdentifier = value;
      }
    }

    public bool RequirePartitionTable { get; set; }

    public Node Header
    {
      get
      {
        return _header;
      }
      set
      {
        __isset.header = true;
        this._header = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool lastLogIndex;
      public bool lastLogTerm;
      public bool follower;
      public bool followerIdentifier;
      public bool header;
    }

    public HeartBeatResponse()
    {
    }

    public HeartBeatResponse(long term, bool requirePartitionTable) : this()
    {
      this.Term = term;
      this.RequirePartitionTable = requirePartitionTable;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_term = false;
        bool isset_requirePartitionTable = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                Term = await iprot.ReadI64Async(cancellationToken);
                isset_term = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                LastLogIndex = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                LastLogTerm = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                Follower = new Node();
                await Follower.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I32)
              {
                FollowerIdentifier = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Bool)
              {
                RequirePartitionTable = await iprot.ReadBoolAsync(cancellationToken);
                isset_requirePartitionTable = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.Struct)
              {
                Header = new Node();
                await Header.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_term)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_requirePartitionTable)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("HeartBeatResponse");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "term";
        field.Type = TType.I64;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(Term, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if (__isset.lastLogIndex)
        {
          field.Name = "lastLogIndex";
          field.Type = TType.I64;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(LastLogIndex, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.lastLogTerm)
        {
          field.Name = "lastLogTerm";
          field.Type = TType.I64;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(LastLogTerm, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Follower != null && __isset.follower)
        {
          field.Name = "follower";
          field.Type = TType.Struct;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Follower.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.followerIdentifier)
        {
          field.Name = "followerIdentifier";
          field.Type = TType.I32;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(FollowerIdentifier, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        field.Name = "requirePartitionTable";
        field.Type = TType.Bool;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(RequirePartitionTable, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if (Header != null && __isset.header)
        {
          field.Name = "header";
          field.Type = TType.Struct;
          field.ID = 7;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Header.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as HeartBeatResponse;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(Term, other.Term)
        && ((__isset.lastLogIndex == other.__isset.lastLogIndex) && ((!__isset.lastLogIndex) || (System.Object.Equals(LastLogIndex, other.LastLogIndex))))
        && ((__isset.lastLogTerm == other.__isset.lastLogTerm) && ((!__isset.lastLogTerm) || (System.Object.Equals(LastLogTerm, other.LastLogTerm))))
        && ((__isset.follower == other.__isset.follower) && ((!__isset.follower) || (System.Object.Equals(Follower, other.Follower))))
        && ((__isset.followerIdentifier == other.__isset.followerIdentifier) && ((!__isset.followerIdentifier) || (System.Object.Equals(FollowerIdentifier, other.FollowerIdentifier))))
        && System.Object.Equals(RequirePartitionTable, other.RequirePartitionTable)
        && ((__isset.header == other.__isset.header) && ((!__isset.header) || (System.Object.Equals(Header, other.Header))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + Term.GetHashCode();
        if(__isset.lastLogIndex)
          hashcode = (hashcode * 397) + LastLogIndex.GetHashCode();
        if(__isset.lastLogTerm)
          hashcode = (hashcode * 397) + LastLogTerm.GetHashCode();
        if(__isset.follower)
          hashcode = (hashcode * 397) + Follower.GetHashCode();
        if(__isset.followerIdentifier)
          hashcode = (hashcode * 397) + FollowerIdentifier.GetHashCode();
        hashcode = (hashcode * 397) + RequirePartitionTable.GetHashCode();
        if(__isset.header)
          hashcode = (hashcode * 397) + Header.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("HeartBeatResponse(");
      sb.Append(", Term: ");
      sb.Append(Term);
      if (__isset.lastLogIndex)
      {
        sb.Append(", LastLogIndex: ");
        sb.Append(LastLogIndex);
      }
      if (__isset.lastLogTerm)
      {
        sb.Append(", LastLogTerm: ");
        sb.Append(LastLogTerm);
      }
      if (Follower != null && __isset.follower)
      {
        sb.Append(", Follower: ");
        sb.Append(Follower);
      }
      if (__isset.followerIdentifier)
      {
        sb.Append(", FollowerIdentifier: ");
        sb.Append(FollowerIdentifier);
      }
      sb.Append(", RequirePartitionTable: ");
      sb.Append(RequirePartitionTable);
      if (Header != null && __isset.header)
      {
        sb.Append(", Header: ");
        sb.Append(Header);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
