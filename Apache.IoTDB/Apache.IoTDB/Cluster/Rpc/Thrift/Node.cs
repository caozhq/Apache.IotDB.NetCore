/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace Apache.IoTDB.Cluster.Rpc.Thrift
{

  public partial class Node : TBase
  {

    public string Ip { get; set; }

    public int MetaPort { get; set; }

    public int NodeIdentifier { get; set; }

    public int DataPort { get; set; }

    public Node()
    {
    }

    public Node(string ip, int metaPort, int nodeIdentifier, int dataPort) : this()
    {
      this.Ip = ip;
      this.MetaPort = metaPort;
      this.NodeIdentifier = nodeIdentifier;
      this.DataPort = dataPort;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_ip = false;
        bool isset_metaPort = false;
        bool isset_nodeIdentifier = false;
        bool isset_dataPort = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Ip = await iprot.ReadStringAsync(cancellationToken);
                isset_ip = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                MetaPort = await iprot.ReadI32Async(cancellationToken);
                isset_metaPort = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                NodeIdentifier = await iprot.ReadI32Async(cancellationToken);
                isset_nodeIdentifier = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                DataPort = await iprot.ReadI32Async(cancellationToken);
                isset_dataPort = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_ip)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_metaPort)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_nodeIdentifier)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_dataPort)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("Node");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "ip";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Ip, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "metaPort";
        field.Type = TType.I32;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(MetaPort, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "nodeIdentifier";
        field.Type = TType.I32;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(NodeIdentifier, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "dataPort";
        field.Type = TType.I32;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(DataPort, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as Node;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(Ip, other.Ip)
        && System.Object.Equals(MetaPort, other.MetaPort)
        && System.Object.Equals(NodeIdentifier, other.NodeIdentifier)
        && System.Object.Equals(DataPort, other.DataPort);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + Ip.GetHashCode();
        hashcode = (hashcode * 397) + MetaPort.GetHashCode();
        hashcode = (hashcode * 397) + NodeIdentifier.GetHashCode();
        hashcode = (hashcode * 397) + DataPort.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("Node(");
      sb.Append(", Ip: ");
      sb.Append(Ip);
      sb.Append(", MetaPort: ");
      sb.Append(MetaPort);
      sb.Append(", NodeIdentifier: ");
      sb.Append(NodeIdentifier);
      sb.Append(", DataPort: ");
      sb.Append(DataPort);
      sb.Append(")");
      return sb.ToString();
    }
  }

}
