/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace Apache.IoTDB.Cluster.Rpc.Thrift
{

  public partial class PullSnapshotRequest : TBase
  {
    private Node _header;

    public List<int> RequiredSlots { get; set; }

    public Node Header
    {
      get
      {
        return _header;
      }
      set
      {
        __isset.header = true;
        this._header = value;
      }
    }

    public bool RequireReadOnly { get; set; }


    public Isset __isset;
    public struct Isset
    {
      public bool header;
    }

    public PullSnapshotRequest()
    {
    }

    public PullSnapshotRequest(List<int> requiredSlots, bool requireReadOnly) : this()
    {
      this.RequiredSlots = requiredSlots;
      this.RequireReadOnly = requireReadOnly;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_requiredSlots = false;
        bool isset_requireReadOnly = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  TList _list8 = await iprot.ReadListBeginAsync(cancellationToken);
                  RequiredSlots = new List<int>(_list8.Count);
                  for(int _i9 = 0; _i9 < _list8.Count; ++_i9)
                  {
                    int _elem10;
                    _elem10 = await iprot.ReadI32Async(cancellationToken);
                    RequiredSlots.Add(_elem10);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_requiredSlots = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Header = new Node();
                await Header.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Bool)
              {
                RequireReadOnly = await iprot.ReadBoolAsync(cancellationToken);
                isset_requireReadOnly = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_requiredSlots)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_requireReadOnly)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("PullSnapshotRequest");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "requiredSlots";
        field.Type = TType.List;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.I32, RequiredSlots.Count), cancellationToken);
          foreach (int _iter11 in RequiredSlots)
          {
            await oprot.WriteI32Async(_iter11, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
        if (Header != null && __isset.header)
        {
          field.Name = "header";
          field.Type = TType.Struct;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Header.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        field.Name = "requireReadOnly";
        field.Type = TType.Bool;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(RequireReadOnly, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as PullSnapshotRequest;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return TCollections.Equals(RequiredSlots, other.RequiredSlots)
        && ((__isset.header == other.__isset.header) && ((!__isset.header) || (System.Object.Equals(Header, other.Header))))
        && System.Object.Equals(RequireReadOnly, other.RequireReadOnly);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(RequiredSlots);
        if(__isset.header)
          hashcode = (hashcode * 397) + Header.GetHashCode();
        hashcode = (hashcode * 397) + RequireReadOnly.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("PullSnapshotRequest(");
      sb.Append(", RequiredSlots: ");
      sb.Append(RequiredSlots);
      if (Header != null && __isset.header)
      {
        sb.Append(", Header: ");
        sb.Append(Header== null ? "<null>" : Header.ToString());
      }
      sb.Append(", RequireReadOnly: ");
      sb.Append(RequireReadOnly);
      sb.Append(")");
      return sb.ToString();
    }
  }

}
