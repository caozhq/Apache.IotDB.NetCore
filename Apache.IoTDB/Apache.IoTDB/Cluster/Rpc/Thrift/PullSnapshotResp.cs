/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace Apache.IoTDB.Cluster.Rpc.Thrift
{

  public partial class PullSnapshotResp : TBase
  {
    private Dictionary<int, byte[]> _snapshotBytes;

    public Dictionary<int, byte[]> SnapshotBytes
    {
      get
      {
        return _snapshotBytes;
      }
      set
      {
        __isset.snapshotBytes = true;
        this._snapshotBytes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool snapshotBytes;
    }

    public PullSnapshotResp()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map12 = await iprot.ReadMapBeginAsync(cancellationToken);
                  SnapshotBytes = new Dictionary<int, byte[]>(_map12.Count);
                  for(int _i13 = 0; _i13 < _map12.Count; ++_i13)
                  {
                    int _key14;
                    byte[] _val15;
                    _key14 = await iprot.ReadI32Async(cancellationToken);
                    _val15 = await iprot.ReadBinaryAsync(cancellationToken);
                    SnapshotBytes[_key14] = _val15;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("PullSnapshotResp");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (SnapshotBytes != null && __isset.snapshotBytes)
        {
          field.Name = "snapshotBytes";
          field.Type = TType.Map;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.I32, TType.String, SnapshotBytes.Count), cancellationToken);
            foreach (int _iter16 in SnapshotBytes.Keys)
            {
              await oprot.WriteI32Async(_iter16, cancellationToken);
              await oprot.WriteBinaryAsync(SnapshotBytes[_iter16], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as PullSnapshotResp;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.snapshotBytes == other.__isset.snapshotBytes) && ((!__isset.snapshotBytes) || (TCollections.Equals(SnapshotBytes, other.SnapshotBytes))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.snapshotBytes)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(SnapshotBytes);
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("PullSnapshotResp(");
      bool __first = true;
      if (SnapshotBytes != null && __isset.snapshotBytes)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SnapshotBytes: ");
        sb.Append(SnapshotBytes);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
