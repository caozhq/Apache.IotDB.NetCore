/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace Apache.IoTDB.Cluster.Rpc.Thrift
{

  public partial class StartUpStatus : TBase
  {

    public long PartitionInterval { get; set; }

    public int HashSalt { get; set; }

    public int ReplicationNumber { get; set; }

    public List<Node> SeedNodeList { get; set; }

    public StartUpStatus()
    {
    }

    public StartUpStatus(long partitionInterval, int hashSalt, int replicationNumber, List<Node> seedNodeList) : this()
    {
      this.PartitionInterval = partitionInterval;
      this.HashSalt = hashSalt;
      this.ReplicationNumber = replicationNumber;
      this.SeedNodeList = seedNodeList;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_partitionInterval = false;
        bool isset_hashSalt = false;
        bool isset_replicationNumber = false;
        bool isset_seedNodeList = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                PartitionInterval = await iprot.ReadI64Async(cancellationToken);
                isset_partitionInterval = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                HashSalt = await iprot.ReadI32Async(cancellationToken);
                isset_hashSalt = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                ReplicationNumber = await iprot.ReadI32Async(cancellationToken);
                isset_replicationNumber = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.List)
              {
                {
                  TList _list4 = await iprot.ReadListBeginAsync(cancellationToken);
                  SeedNodeList = new List<Node>(_list4.Count);
                  for(int _i5 = 0; _i5 < _list4.Count; ++_i5)
                  {
                    Node _elem6;
                    _elem6 = new Node();
                    await _elem6.ReadAsync(iprot, cancellationToken);
                    SeedNodeList.Add(_elem6);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_seedNodeList = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_partitionInterval)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_hashSalt)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_replicationNumber)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_seedNodeList)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("StartUpStatus");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "partitionInterval";
        field.Type = TType.I64;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(PartitionInterval, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "hashSalt";
        field.Type = TType.I32;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(HashSalt, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "replicationNumber";
        field.Type = TType.I32;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(ReplicationNumber, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "seedNodeList";
        field.Type = TType.List;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, SeedNodeList.Count), cancellationToken);
          foreach (Node _iter7 in SeedNodeList)
          {
            await _iter7.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as StartUpStatus;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(PartitionInterval, other.PartitionInterval)
        && System.Object.Equals(HashSalt, other.HashSalt)
        && System.Object.Equals(ReplicationNumber, other.ReplicationNumber)
        && TCollections.Equals(SeedNodeList, other.SeedNodeList);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + PartitionInterval.GetHashCode();
        hashcode = (hashcode * 397) + HashSalt.GetHashCode();
        hashcode = (hashcode * 397) + ReplicationNumber.GetHashCode();
        hashcode = (hashcode * 397) + TCollections.GetHashCode(SeedNodeList);
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("StartUpStatus(");
      sb.Append(", PartitionInterval: ");
      sb.Append(PartitionInterval);
      sb.Append(", HashSalt: ");
      sb.Append(HashSalt);
      sb.Append(", ReplicationNumber: ");
      sb.Append(ReplicationNumber);
      sb.Append(", SeedNodeList: ");
      sb.Append(SeedNodeList);
      sb.Append(")");
      return sb.ToString();
    }
  }

}
