/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace Apache.IoTDB.Service.Rpc.Thrift
{

  public partial class ServerProperties : TBase
  {

    public string Version { get; set; }

    public List<string> SupportedTimeAggregationOperations { get; set; }

    public string TimestampPrecision { get; set; }

    public ServerProperties()
    {
    }

    public ServerProperties(string version, List<string> supportedTimeAggregationOperations, string timestampPrecision) : this()
    {
      this.Version = version;
      this.SupportedTimeAggregationOperations = supportedTimeAggregationOperations;
      this.TimestampPrecision = timestampPrecision;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_version = false;
        bool isset_supportedTimeAggregationOperations = false;
        bool isset_timestampPrecision = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Version = await iprot.ReadStringAsync(cancellationToken);
                isset_version = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  TList _list197 = await iprot.ReadListBeginAsync(cancellationToken);
                  SupportedTimeAggregationOperations = new List<string>(_list197.Count);
                  for(int _i198 = 0; _i198 < _list197.Count; ++_i198)
                  {
                    string _elem199;
                    _elem199 = await iprot.ReadStringAsync(cancellationToken);
                    SupportedTimeAggregationOperations.Add(_elem199);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_supportedTimeAggregationOperations = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                TimestampPrecision = await iprot.ReadStringAsync(cancellationToken);
                isset_timestampPrecision = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_version)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_supportedTimeAggregationOperations)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_timestampPrecision)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("ServerProperties");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "version";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Version, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "supportedTimeAggregationOperations";
        field.Type = TType.List;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, SupportedTimeAggregationOperations.Count), cancellationToken);
          foreach (string _iter200 in SupportedTimeAggregationOperations)
          {
            await oprot.WriteStringAsync(_iter200, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "timestampPrecision";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(TimestampPrecision, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as ServerProperties;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(Version, other.Version)
        && TCollections.Equals(SupportedTimeAggregationOperations, other.SupportedTimeAggregationOperations)
        && System.Object.Equals(TimestampPrecision, other.TimestampPrecision);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + Version.GetHashCode();
        hashcode = (hashcode * 397) + TCollections.GetHashCode(SupportedTimeAggregationOperations);
        hashcode = (hashcode * 397) + TimestampPrecision.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("ServerProperties(");
      sb.Append(", Version: ");
      sb.Append(Version);
      sb.Append(", SupportedTimeAggregationOperations: ");
      sb.Append(SupportedTimeAggregationOperations);
      sb.Append(", TimestampPrecision: ");
      sb.Append(TimestampPrecision);
      sb.Append(")");
      return sb.ToString();
    }
  }

}
