/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace Apache.IoTDB.Service.Rpc.Thrift
{

  public partial class TSExecuteStatementResp : TBase
  {
    private long _queryId;
    private List<string> _columns;
    private string _operationType;
    private bool _ignoreTimeStamp;
    private List<string> _dataTypeList;
    private TSQueryDataSet _queryDataSet;
    private TSQueryNonAlignDataSet _nonAlignQueryDataSet;
    private Dictionary<string, int> _columnNameIndexMap;

    public TSStatus Status { get; set; }

    public long QueryId
    {
      get
      {
        return _queryId;
      }
      set
      {
        __isset.queryId = true;
        this._queryId = value;
      }
    }

    public List<string> Columns
    {
      get
      {
        return _columns;
      }
      set
      {
        __isset.columns = true;
        this._columns = value;
      }
    }

    public string OperationType
    {
      get
      {
        return _operationType;
      }
      set
      {
        __isset.operationType = true;
        this._operationType = value;
      }
    }

    public bool IgnoreTimeStamp
    {
      get
      {
        return _ignoreTimeStamp;
      }
      set
      {
        __isset.ignoreTimeStamp = true;
        this._ignoreTimeStamp = value;
      }
    }

    public List<string> DataTypeList
    {
      get
      {
        return _dataTypeList;
      }
      set
      {
        __isset.dataTypeList = true;
        this._dataTypeList = value;
      }
    }

    public TSQueryDataSet QueryDataSet
    {
      get
      {
        return _queryDataSet;
      }
      set
      {
        __isset.queryDataSet = true;
        this._queryDataSet = value;
      }
    }

    public TSQueryNonAlignDataSet NonAlignQueryDataSet
    {
      get
      {
        return _nonAlignQueryDataSet;
      }
      set
      {
        __isset.nonAlignQueryDataSet = true;
        this._nonAlignQueryDataSet = value;
      }
    }

    public Dictionary<string, int> ColumnNameIndexMap
    {
      get
      {
        return _columnNameIndexMap;
      }
      set
      {
        __isset.columnNameIndexMap = true;
        this._columnNameIndexMap = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool queryId;
      public bool columns;
      public bool operationType;
      public bool ignoreTimeStamp;
      public bool dataTypeList;
      public bool queryDataSet;
      public bool nonAlignQueryDataSet;
      public bool columnNameIndexMap;
    }

    public TSExecuteStatementResp()
    {
    }

    public TSExecuteStatementResp(TSStatus status) : this()
    {
      this.Status = status;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_status = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Status = new TSStatus();
                await Status.ReadAsync(iprot, cancellationToken);
                isset_status = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                QueryId = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  TList _list4 = await iprot.ReadListBeginAsync(cancellationToken);
                  Columns = new List<string>(_list4.Count);
                  for(int _i5 = 0; _i5 < _list4.Count; ++_i5)
                  {
                    string _elem6;
                    _elem6 = await iprot.ReadStringAsync(cancellationToken);
                    Columns.Add(_elem6);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                OperationType = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Bool)
              {
                IgnoreTimeStamp = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.List)
              {
                {
                  TList _list7 = await iprot.ReadListBeginAsync(cancellationToken);
                  DataTypeList = new List<string>(_list7.Count);
                  for(int _i8 = 0; _i8 < _list7.Count; ++_i8)
                  {
                    string _elem9;
                    _elem9 = await iprot.ReadStringAsync(cancellationToken);
                    DataTypeList.Add(_elem9);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.Struct)
              {
                QueryDataSet = new TSQueryDataSet();
                await QueryDataSet.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.Struct)
              {
                NonAlignQueryDataSet = new TSQueryNonAlignDataSet();
                await NonAlignQueryDataSet.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map10 = await iprot.ReadMapBeginAsync(cancellationToken);
                  ColumnNameIndexMap = new Dictionary<string, int>(_map10.Count);
                  for(int _i11 = 0; _i11 < _map10.Count; ++_i11)
                  {
                    string _key12;
                    int _val13;
                    _key12 = await iprot.ReadStringAsync(cancellationToken);
                    _val13 = await iprot.ReadI32Async(cancellationToken);
                    ColumnNameIndexMap[_key12] = _val13;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_status)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("TSExecuteStatementResp");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "status";
        field.Type = TType.Struct;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Status.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if (__isset.queryId)
        {
          field.Name = "queryId";
          field.Type = TType.I64;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(QueryId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Columns != null && __isset.columns)
        {
          field.Name = "columns";
          field.Type = TType.List;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Columns.Count), cancellationToken);
            foreach (string _iter14 in Columns)
            {
              await oprot.WriteStringAsync(_iter14, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (OperationType != null && __isset.operationType)
        {
          field.Name = "operationType";
          field.Type = TType.String;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(OperationType, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.ignoreTimeStamp)
        {
          field.Name = "ignoreTimeStamp";
          field.Type = TType.Bool;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(IgnoreTimeStamp, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (DataTypeList != null && __isset.dataTypeList)
        {
          field.Name = "dataTypeList";
          field.Type = TType.List;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, DataTypeList.Count), cancellationToken);
            foreach (string _iter15 in DataTypeList)
            {
              await oprot.WriteStringAsync(_iter15, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (QueryDataSet != null && __isset.queryDataSet)
        {
          field.Name = "queryDataSet";
          field.Type = TType.Struct;
          field.ID = 7;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await QueryDataSet.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (NonAlignQueryDataSet != null && __isset.nonAlignQueryDataSet)
        {
          field.Name = "nonAlignQueryDataSet";
          field.Type = TType.Struct;
          field.ID = 8;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await NonAlignQueryDataSet.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ColumnNameIndexMap != null && __isset.columnNameIndexMap)
        {
          field.Name = "columnNameIndexMap";
          field.Type = TType.Map;
          field.ID = 9;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.I32, ColumnNameIndexMap.Count), cancellationToken);
            foreach (string _iter16 in ColumnNameIndexMap.Keys)
            {
              await oprot.WriteStringAsync(_iter16, cancellationToken);
              await oprot.WriteI32Async(ColumnNameIndexMap[_iter16], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as TSExecuteStatementResp;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(Status, other.Status)
        && ((__isset.queryId == other.__isset.queryId) && ((!__isset.queryId) || (System.Object.Equals(QueryId, other.QueryId))))
        && ((__isset.columns == other.__isset.columns) && ((!__isset.columns) || (TCollections.Equals(Columns, other.Columns))))
        && ((__isset.operationType == other.__isset.operationType) && ((!__isset.operationType) || (System.Object.Equals(OperationType, other.OperationType))))
        && ((__isset.ignoreTimeStamp == other.__isset.ignoreTimeStamp) && ((!__isset.ignoreTimeStamp) || (System.Object.Equals(IgnoreTimeStamp, other.IgnoreTimeStamp))))
        && ((__isset.dataTypeList == other.__isset.dataTypeList) && ((!__isset.dataTypeList) || (TCollections.Equals(DataTypeList, other.DataTypeList))))
        && ((__isset.queryDataSet == other.__isset.queryDataSet) && ((!__isset.queryDataSet) || (System.Object.Equals(QueryDataSet, other.QueryDataSet))))
        && ((__isset.nonAlignQueryDataSet == other.__isset.nonAlignQueryDataSet) && ((!__isset.nonAlignQueryDataSet) || (System.Object.Equals(NonAlignQueryDataSet, other.NonAlignQueryDataSet))))
        && ((__isset.columnNameIndexMap == other.__isset.columnNameIndexMap) && ((!__isset.columnNameIndexMap) || (TCollections.Equals(ColumnNameIndexMap, other.ColumnNameIndexMap))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + Status.GetHashCode();
        if(__isset.queryId)
          hashcode = (hashcode * 397) + QueryId.GetHashCode();
        if(__isset.columns)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Columns);
        if(__isset.operationType)
          hashcode = (hashcode * 397) + OperationType.GetHashCode();
        if(__isset.ignoreTimeStamp)
          hashcode = (hashcode * 397) + IgnoreTimeStamp.GetHashCode();
        if(__isset.dataTypeList)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(DataTypeList);
        if(__isset.queryDataSet)
          hashcode = (hashcode * 397) + QueryDataSet.GetHashCode();
        if(__isset.nonAlignQueryDataSet)
          hashcode = (hashcode * 397) + NonAlignQueryDataSet.GetHashCode();
        if(__isset.columnNameIndexMap)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(ColumnNameIndexMap);
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("TSExecuteStatementResp(");
      sb.Append(", Status: ");
      sb.Append(Status== null ? "<null>" : Status.ToString());
      if (__isset.queryId)
      {
        sb.Append(", QueryId: ");
        sb.Append(QueryId);
      }
      if (Columns != null && __isset.columns)
      {
        sb.Append(", Columns: ");
        sb.Append(Columns);
      }
      if (OperationType != null && __isset.operationType)
      {
        sb.Append(", OperationType: ");
        sb.Append(OperationType);
      }
      if (__isset.ignoreTimeStamp)
      {
        sb.Append(", IgnoreTimeStamp: ");
        sb.Append(IgnoreTimeStamp);
      }
      if (DataTypeList != null && __isset.dataTypeList)
      {
        sb.Append(", DataTypeList: ");
        sb.Append(DataTypeList);
      }
      if (QueryDataSet != null && __isset.queryDataSet)
      {
        sb.Append(", QueryDataSet: ");
        sb.Append(QueryDataSet);
      }
      if (NonAlignQueryDataSet != null && __isset.nonAlignQueryDataSet)
      {
        sb.Append(", NonAlignQueryDataSet: ");
        sb.Append(NonAlignQueryDataSet);
      }
      if (ColumnNameIndexMap != null && __isset.columnNameIndexMap)
      {
        sb.Append(", ColumnNameIndexMap: ");
        sb.Append(ColumnNameIndexMap);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
