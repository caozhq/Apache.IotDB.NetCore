/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace Apache.IoTDB.Service.Rpc.Thrift
{

  public partial class TSFetchResultsResp : TBase
  {
    private TSQueryDataSet _queryDataSet;
    private TSQueryNonAlignDataSet _nonAlignQueryDataSet;

    public TSStatus Status { get; set; }

    public bool HasResultSet { get; set; }

    public bool IsAlign { get; set; }

    public TSQueryDataSet QueryDataSet
    {
      get
      {
        return _queryDataSet;
      }
      set
      {
        __isset.queryDataSet = true;
        this._queryDataSet = value;
      }
    }

    public TSQueryNonAlignDataSet NonAlignQueryDataSet
    {
      get
      {
        return _nonAlignQueryDataSet;
      }
      set
      {
        __isset.nonAlignQueryDataSet = true;
        this._nonAlignQueryDataSet = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool queryDataSet;
      public bool nonAlignQueryDataSet;
    }

    public TSFetchResultsResp()
    {
    }

    public TSFetchResultsResp(TSStatus status, bool hasResultSet, bool isAlign) : this()
    {
      this.Status = status;
      this.HasResultSet = hasResultSet;
      this.IsAlign = isAlign;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_status = false;
        bool isset_hasResultSet = false;
        bool isset_isAlign = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Status = new TSStatus();
                await Status.ReadAsync(iprot, cancellationToken);
                isset_status = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Bool)
              {
                HasResultSet = await iprot.ReadBoolAsync(cancellationToken);
                isset_hasResultSet = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Bool)
              {
                IsAlign = await iprot.ReadBoolAsync(cancellationToken);
                isset_isAlign = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                QueryDataSet = new TSQueryDataSet();
                await QueryDataSet.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Struct)
              {
                NonAlignQueryDataSet = new TSQueryNonAlignDataSet();
                await NonAlignQueryDataSet.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_status)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_hasResultSet)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_isAlign)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("TSFetchResultsResp");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "status";
        field.Type = TType.Struct;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Status.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "hasResultSet";
        field.Type = TType.Bool;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(HasResultSet, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "isAlign";
        field.Type = TType.Bool;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(IsAlign, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if (QueryDataSet != null && __isset.queryDataSet)
        {
          field.Name = "queryDataSet";
          field.Type = TType.Struct;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await QueryDataSet.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (NonAlignQueryDataSet != null && __isset.nonAlignQueryDataSet)
        {
          field.Name = "nonAlignQueryDataSet";
          field.Type = TType.Struct;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await NonAlignQueryDataSet.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as TSFetchResultsResp;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(Status, other.Status)
        && System.Object.Equals(HasResultSet, other.HasResultSet)
        && System.Object.Equals(IsAlign, other.IsAlign)
        && ((__isset.queryDataSet == other.__isset.queryDataSet) && ((!__isset.queryDataSet) || (System.Object.Equals(QueryDataSet, other.QueryDataSet))))
        && ((__isset.nonAlignQueryDataSet == other.__isset.nonAlignQueryDataSet) && ((!__isset.nonAlignQueryDataSet) || (System.Object.Equals(NonAlignQueryDataSet, other.NonAlignQueryDataSet))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + Status.GetHashCode();
        hashcode = (hashcode * 397) + HasResultSet.GetHashCode();
        hashcode = (hashcode * 397) + IsAlign.GetHashCode();
        if(__isset.queryDataSet)
          hashcode = (hashcode * 397) + QueryDataSet.GetHashCode();
        if(__isset.nonAlignQueryDataSet)
          hashcode = (hashcode * 397) + NonAlignQueryDataSet.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("TSFetchResultsResp(");
      sb.Append(", Status: ");
      sb.Append(Status== null ? "<null>" : Status.ToString());
      sb.Append(", HasResultSet: ");
      sb.Append(HasResultSet);
      sb.Append(", IsAlign: ");
      sb.Append(IsAlign);
      if (QueryDataSet != null && __isset.queryDataSet)
      {
        sb.Append(", QueryDataSet: ");
        sb.Append(QueryDataSet);
      }
      if (NonAlignQueryDataSet != null && __isset.nonAlignQueryDataSet)
      {
        sb.Append(", NonAlignQueryDataSet: ");
        sb.Append(NonAlignQueryDataSet);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
