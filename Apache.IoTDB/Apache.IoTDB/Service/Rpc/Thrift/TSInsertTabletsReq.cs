/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace Apache.IoTDB.Service.Rpc.Thrift
{

  public partial class TSInsertTabletsReq : TBase
  {

    public long SessionId { get; set; }

    public List<string> DeviceIds { get; set; }

    public List<List<string>> MeasurementsList { get; set; }

    public List<byte[]> ValuesList { get; set; }

    public List<byte[]> TimestampsList { get; set; }

    public List<List<int>> TypesList { get; set; }

    public List<int> SizeList { get; set; }

    public TSInsertTabletsReq()
    {
    }

    public TSInsertTabletsReq(long sessionId, List<string> deviceIds, List<List<string>> measurementsList, List<byte[]> valuesList, List<byte[]> timestampsList, List<List<int>> typesList, List<int> sizeList) : this()
    {
      this.SessionId = sessionId;
      this.DeviceIds = deviceIds;
      this.MeasurementsList = measurementsList;
      this.ValuesList = valuesList;
      this.TimestampsList = timestampsList;
      this.TypesList = typesList;
      this.SizeList = sizeList;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_sessionId = false;
        bool isset_deviceIds = false;
        bool isset_measurementsList = false;
        bool isset_valuesList = false;
        bool isset_timestampsList = false;
        bool isset_typesList = false;
        bool isset_sizeList = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                SessionId = await iprot.ReadI64Async(cancellationToken);
                isset_sessionId = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  TList _list55 = await iprot.ReadListBeginAsync(cancellationToken);
                  DeviceIds = new List<string>(_list55.Count);
                  for(int _i56 = 0; _i56 < _list55.Count; ++_i56)
                  {
                    string _elem57;
                    _elem57 = await iprot.ReadStringAsync(cancellationToken);
                    DeviceIds.Add(_elem57);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_deviceIds = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  TList _list58 = await iprot.ReadListBeginAsync(cancellationToken);
                  MeasurementsList = new List<List<string>>(_list58.Count);
                  for(int _i59 = 0; _i59 < _list58.Count; ++_i59)
                  {
                    List<string> _elem60;
                    {
                      TList _list61 = await iprot.ReadListBeginAsync(cancellationToken);
                      _elem60 = new List<string>(_list61.Count);
                      for(int _i62 = 0; _i62 < _list61.Count; ++_i62)
                      {
                        string _elem63;
                        _elem63 = await iprot.ReadStringAsync(cancellationToken);
                        _elem60.Add(_elem63);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                    MeasurementsList.Add(_elem60);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_measurementsList = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.List)
              {
                {
                  TList _list64 = await iprot.ReadListBeginAsync(cancellationToken);
                  ValuesList = new List<byte[]>(_list64.Count);
                  for(int _i65 = 0; _i65 < _list64.Count; ++_i65)
                  {
                    byte[] _elem66;
                    _elem66 = await iprot.ReadBinaryAsync(cancellationToken);
                    ValuesList.Add(_elem66);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_valuesList = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.List)
              {
                {
                  TList _list67 = await iprot.ReadListBeginAsync(cancellationToken);
                  TimestampsList = new List<byte[]>(_list67.Count);
                  for(int _i68 = 0; _i68 < _list67.Count; ++_i68)
                  {
                    byte[] _elem69;
                    _elem69 = await iprot.ReadBinaryAsync(cancellationToken);
                    TimestampsList.Add(_elem69);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_timestampsList = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.List)
              {
                {
                  TList _list70 = await iprot.ReadListBeginAsync(cancellationToken);
                  TypesList = new List<List<int>>(_list70.Count);
                  for(int _i71 = 0; _i71 < _list70.Count; ++_i71)
                  {
                    List<int> _elem72;
                    {
                      TList _list73 = await iprot.ReadListBeginAsync(cancellationToken);
                      _elem72 = new List<int>(_list73.Count);
                      for(int _i74 = 0; _i74 < _list73.Count; ++_i74)
                      {
                        int _elem75;
                        _elem75 = await iprot.ReadI32Async(cancellationToken);
                        _elem72.Add(_elem75);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                    TypesList.Add(_elem72);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_typesList = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.List)
              {
                {
                  TList _list76 = await iprot.ReadListBeginAsync(cancellationToken);
                  SizeList = new List<int>(_list76.Count);
                  for(int _i77 = 0; _i77 < _list76.Count; ++_i77)
                  {
                    int _elem78;
                    _elem78 = await iprot.ReadI32Async(cancellationToken);
                    SizeList.Add(_elem78);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_sizeList = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_sessionId)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_deviceIds)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_measurementsList)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_valuesList)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_timestampsList)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_typesList)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_sizeList)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("TSInsertTabletsReq");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "sessionId";
        field.Type = TType.I64;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(SessionId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "deviceIds";
        field.Type = TType.List;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, DeviceIds.Count), cancellationToken);
          foreach (string _iter79 in DeviceIds)
          {
            await oprot.WriteStringAsync(_iter79, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "measurementsList";
        field.Type = TType.List;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.List, MeasurementsList.Count), cancellationToken);
          foreach (List<string> _iter80 in MeasurementsList)
          {
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, _iter80.Count), cancellationToken);
              foreach (string _iter81 in _iter80)
              {
                await oprot.WriteStringAsync(_iter81, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "valuesList";
        field.Type = TType.List;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, ValuesList.Count), cancellationToken);
          foreach (byte[] _iter82 in ValuesList)
          {
            await oprot.WriteBinaryAsync(_iter82, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "timestampsList";
        field.Type = TType.List;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, TimestampsList.Count), cancellationToken);
          foreach (byte[] _iter83 in TimestampsList)
          {
            await oprot.WriteBinaryAsync(_iter83, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "typesList";
        field.Type = TType.List;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.List, TypesList.Count), cancellationToken);
          foreach (List<int> _iter84 in TypesList)
          {
            {
              await oprot.WriteListBeginAsync(new TList(TType.I32, _iter84.Count), cancellationToken);
              foreach (int _iter85 in _iter84)
              {
                await oprot.WriteI32Async(_iter85, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "sizeList";
        field.Type = TType.List;
        field.ID = 7;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.I32, SizeList.Count), cancellationToken);
          foreach (int _iter86 in SizeList)
          {
            await oprot.WriteI32Async(_iter86, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as TSInsertTabletsReq;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(SessionId, other.SessionId)
        && TCollections.Equals(DeviceIds, other.DeviceIds)
        && TCollections.Equals(MeasurementsList, other.MeasurementsList)
        && TCollections.Equals(ValuesList, other.ValuesList)
        && TCollections.Equals(TimestampsList, other.TimestampsList)
        && TCollections.Equals(TypesList, other.TypesList)
        && TCollections.Equals(SizeList, other.SizeList);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + SessionId.GetHashCode();
        hashcode = (hashcode * 397) + TCollections.GetHashCode(DeviceIds);
        hashcode = (hashcode * 397) + TCollections.GetHashCode(MeasurementsList);
        hashcode = (hashcode * 397) + TCollections.GetHashCode(ValuesList);
        hashcode = (hashcode * 397) + TCollections.GetHashCode(TimestampsList);
        hashcode = (hashcode * 397) + TCollections.GetHashCode(TypesList);
        hashcode = (hashcode * 397) + TCollections.GetHashCode(SizeList);
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("TSInsertTabletsReq(");
      sb.Append(", SessionId: ");
      sb.Append(SessionId);
      sb.Append(", DeviceIds: ");
      sb.Append(DeviceIds);
      sb.Append(", MeasurementsList: ");
      sb.Append(MeasurementsList);
      sb.Append(", ValuesList: ");
      sb.Append(ValuesList);
      sb.Append(", TimestampsList: ");
      sb.Append(TimestampsList);
      sb.Append(", TypesList: ");
      sb.Append(TypesList);
      sb.Append(", SizeList: ");
      sb.Append(SizeList);
      sb.Append(")");
      return sb.ToString();
    }
  }

}
