/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace Apache.IoTDB.Service.Rpc.Thrift
{

  public partial class TSQueryNonAlignDataSet : TBase
  {

    public List<byte[]> TimeList { get; set; }

    public List<byte[]> ValueList { get; set; }

    public TSQueryNonAlignDataSet()
    {
    }

    public TSQueryNonAlignDataSet(List<byte[]> timeList, List<byte[]> valueList) : this()
    {
      this.TimeList = timeList;
      this.ValueList = valueList;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_timeList = false;
        bool isset_valueList = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  TList _list209 = await iprot.ReadListBeginAsync(cancellationToken);
                  TimeList = new List<byte[]>(_list209.Count);
                  for(int _i210 = 0; _i210 < _list209.Count; ++_i210)
                  {
                    byte[] _elem211;
                    _elem211 = await iprot.ReadBinaryAsync(cancellationToken);
                    TimeList.Add(_elem211);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_timeList = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  TList _list212 = await iprot.ReadListBeginAsync(cancellationToken);
                  ValueList = new List<byte[]>(_list212.Count);
                  for(int _i213 = 0; _i213 < _list212.Count; ++_i213)
                  {
                    byte[] _elem214;
                    _elem214 = await iprot.ReadBinaryAsync(cancellationToken);
                    ValueList.Add(_elem214);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_valueList = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_timeList)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_valueList)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("TSQueryNonAlignDataSet");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "timeList";
        field.Type = TType.List;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, TimeList.Count), cancellationToken);
          foreach (byte[] _iter215 in TimeList)
          {
            await oprot.WriteBinaryAsync(_iter215, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "valueList";
        field.Type = TType.List;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, ValueList.Count), cancellationToken);
          foreach (byte[] _iter216 in ValueList)
          {
            await oprot.WriteBinaryAsync(_iter216, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as TSQueryNonAlignDataSet;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return TCollections.Equals(TimeList, other.TimeList)
        && TCollections.Equals(ValueList, other.ValueList);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(TimeList);
        hashcode = (hashcode * 397) + TCollections.GetHashCode(ValueList);
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("TSQueryNonAlignDataSet(");
      sb.Append(", TimeList: ");
      sb.Append(TimeList);
      sb.Append(", ValueList: ");
      sb.Append(ValueList);
      sb.Append(")");
      return sb.ToString();
    }
  }

}
