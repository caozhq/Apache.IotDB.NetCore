/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace Apache.IoTDB.Service.Sync.Thrift
{

  public partial class ConfirmInfo : TBase
  {
    private string _address;
    private string _uuid;
    private long _partitionInterval;
    private string _version;

    public string Address
    {
      get
      {
        return _address;
      }
      set
      {
        __isset.address = true;
        this._address = value;
      }
    }

    public string Uuid
    {
      get
      {
        return _uuid;
      }
      set
      {
        __isset.uuid = true;
        this._uuid = value;
      }
    }

    public long PartitionInterval
    {
      get
      {
        return _partitionInterval;
      }
      set
      {
        __isset.partitionInterval = true;
        this._partitionInterval = value;
      }
    }

    public string Version
    {
      get
      {
        return _version;
      }
      set
      {
        __isset.version = true;
        this._version = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool address;
      public bool uuid;
      public bool partitionInterval;
      public bool version;
    }

    public ConfirmInfo()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Address = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Uuid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                PartitionInterval = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Version = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("ConfirmInfo");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Address != null && __isset.address)
        {
          field.Name = "address";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Address, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Uuid != null && __isset.uuid)
        {
          field.Name = "uuid";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Uuid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.partitionInterval)
        {
          field.Name = "partitionInterval";
          field.Type = TType.I64;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(PartitionInterval, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Version != null && __isset.version)
        {
          field.Name = "version";
          field.Type = TType.String;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Version, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as ConfirmInfo;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.address == other.__isset.address) && ((!__isset.address) || (System.Object.Equals(Address, other.Address))))
        && ((__isset.uuid == other.__isset.uuid) && ((!__isset.uuid) || (System.Object.Equals(Uuid, other.Uuid))))
        && ((__isset.partitionInterval == other.__isset.partitionInterval) && ((!__isset.partitionInterval) || (System.Object.Equals(PartitionInterval, other.PartitionInterval))))
        && ((__isset.version == other.__isset.version) && ((!__isset.version) || (System.Object.Equals(Version, other.Version))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.address)
          hashcode = (hashcode * 397) + Address.GetHashCode();
        if(__isset.uuid)
          hashcode = (hashcode * 397) + Uuid.GetHashCode();
        if(__isset.partitionInterval)
          hashcode = (hashcode * 397) + PartitionInterval.GetHashCode();
        if(__isset.version)
          hashcode = (hashcode * 397) + Version.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("ConfirmInfo(");
      bool __first = true;
      if (Address != null && __isset.address)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Address: ");
        sb.Append(Address);
      }
      if (Uuid != null && __isset.uuid)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Uuid: ");
        sb.Append(Uuid);
      }
      if (__isset.partitionInterval)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("PartitionInterval: ");
        sb.Append(PartitionInterval);
      }
      if (Version != null && __isset.version)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Version: ");
        sb.Append(Version);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
